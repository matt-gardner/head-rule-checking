# Replaces certain Penn Treebank constructions with appropriate Tregex syntax.
#
# The motivation behind these macros is to make construction of Tsurgeon rules
# as painless and intuitive as possible, while maximizing reusability. While
# there can be high overhead in learning the mappings, they significantly
# simplify Tsurgeon operation files.
#
# NB:
# - The two fields must be separated by a tab.
# - For each macro, TregexPatternCompiler does a replaceAll on the regex string
#   thus far, replacing each instance of the first field with the second.
# - Replacements are done sequentially, so the order of macros matters!
# - Per the Javadoc for String.replaceAll: backslashes (\) and dollar signs ($)
#   in the replacement string may cause the results to be different
#   than if it were being treated as a literal replacement string. Dollar signs
#   may be treated as references to captured subsequences, and backslashes are
#   used to escape literal characters in the replacement string.
# - This file assumes that macro file relations.macro is made available and
#   interpreted at some point later (preferably last of the macro files).

# author Michael Deeringer (mjd2188@columbia.edu)

################################
# START: pre-processing macros #
################################

## REFILLING GAPS ##
# To undo movements that leave traces/gaps (terminal *T* in PTB), we must
# identify both the filler and the gap. The filler is a non-terminal constituent
# whose root label has an identity index, and its corresponding gap is a non-
# terminal null element whose root label has a reference index of the same
# value.
# NOTE: we also undo any movement that leaves an *ICH* null element ("interpret
# constituent here"). This adjustment is beneficial for head propagation.
#
# PROCESS: Fillers may fill multiple gaps, so we must copy (not move) a filler
# into its corresponding gap. But then how do we identify the original filler
# subtree to remove it once we're finished?
# Answer: We label the filler subtree with an auxiliary FILLER parent label,
# thus making it "marked". At this point, we refer to the marked filler as
# simply "filler" and its contents just under the FILLER parent as
# "fillerContent". Once we're finished refilling gaps, we can safely remove the
# entire subtree rooted in FILLER.
#
# For more information, see opfiles/undoMovement.op

# Filler content without the auxiliary FILLER parent tag.
fillerUnmarked(%[-\w]+)(=[-\w]+)?	(/-([0-9]+)\$/#1$1$2 dominating anything and not immediately dominated by /^FILLER\$/)

# The FILLER contents. That is, a constituent that has an identity index, and
# which is immediately under a FILLER tag.
fillerContent(%[-\w]+)(=[-\w]+)?	(/-([0-9]+)\$/#1$1$2 immediately dominated by /^FILLER\$/)

# The FILLER and its contents. That is, the entire FILLER subtree.
filler(%[-\w]+)(=[-\w]+)?	(/^FILLER\$/$2 immediately dominating /-([0-9]+)\$/#1$1)

# A "null element", as defined by the PTB. POS is always -NONE-.
nullElement(%[-\w]+)(=[-\w]+)?	(/^-NONE-/$2 with only child /-([0-9]+)\$/#1$1)

# Null element subtrees for *T* and *ICH*. (Each terminal may be preceded by a
# token index annotation, which is why the regex below doesn't assume that the
# original token string (e.g. *T*) is at the beginning of the terminal's label.)
gap(%[-\w]+)(=[-\w]+)?	(/^-NONE-/$2 with only child /(?:\\\*T\\\*|\\\*ICH\\\*)-([0-9]+)\$/#1$1)


## COORDINATION ##
# Macros used when adjoining a CONJPP above a conjunction-like thing (or a
# sequence of them) and its right siblings.

# Includes non-noun categories: CD ("both"), DT ("all"), FW, NAC, NX,
# PRP ("him"), QP
#nounThing(=[-\w]+)?	CD|DT|FW|NAC|NN|NNP|NNPS|NNS|NP|NX|PRP|QP$1

# coordination matches a conjunct parent such that:
# - the first child is conjunct, or DT then a conjunct
# - the last child is a conjunct, preceded by a CC or CONJPP
# - any non-last conjunct child (that's not a first-child DT) must be followed
#   by a conjLink or CONJPP
# - any conjLink child must be followed by a conjunct, conjLink, or CONJPP
# e.g. (NP NP , NP , CC NP)
# NOTE: CONJPP's are included to handle conjunction transformations. See
# opfiles/buildConjTrees.op
coordination(=[-\w]+)?\b	(@conjunct$1 [<1 @conjunct | <1 (@DT=initialDT \$+ @conjunct)] <-1 (@conjunct=last \$- @CC|CONJPP) !< (@conjunct !== =last !== =initialDT !\$+ @conjLink !\$+ @CONJPP) !< (@conjLink !\$+ @conjunct !\$+ @conjLink !\$+ @CONJPP))

conjunct(=[-\w]+)?\b	not_nonConjunctPattern$1

# Complement of the given pattern
not_(\w+)(=[-\w]+)?	/^(?!$1)/$2

nonConjunctPattern	punctPattern|conjLinkPattern|CONJPP\\b

# Conjunction link separates content in a conjunction. Note: colon is parent tag
# of semicolon.
conjLink(=[-\w]+)?\b	/^(conjLinkPattern)/$1
conjLinkPattern	,|:|CC\\b|CONJP\\b




# npList matches an NP parent such that:
# - the first child is an NP
# - the last child is an NP, preceded by a CC or CONJPP
# - any NP child that is not the last child must be followed by a comma, CC, or CONJPP
# - any comma child must be followed by an NP or a CC
# - any CC or CONJPP child must be followed by an NP
# - each child must be an NP, comma, CC, or CONJPP (holds implicitly)
# e.g. (NP NP , NP , CC NP)
npList(=[-\w]+)?	(@NP$1 <1 @NP <-1 (@NP=last \$- @CC|CONJPP) !< (@NP !== =last !\$+ @comma !\$+ @CC|CONJPP) !< (@comma !\$+ @NP|CC) !< (@CC !\$+ @NP) !< (@CONJPP !\$+ @NP))

# neither-nor. Only 6 occurrences in WSJ, plus one as (NP (DT neither) (NP NP (CC nor) NP)).
# e.g. (NP (DT neither) NP (CC nor) NP)
neitherNor(=[-\w]+)?	(@NP$1 < (@DT < /^neither\$/ \$+ (@NP \$+ (@CC < /^nor\$/ \$+ @NP))))



##############################
# END: pre-processing macros #
##############################


##################################
# START: head propagation macros #
##################################

# Tregex can assign regex capture groups to variable names:
# / <regex-stuff> /#<group-number>%<variable-name>
# We use this mechanism to identify head information within a node label and
# store it for comparison and propagation.
#
# CAVEAT: patterns for macros like leftmostHeadedXXX, headedXXX, and headlessXXX
# allow any characters in XXX except for those that Tregex syntax interprets
# specially, namely %, =, or whitespace. However, lack of proper escaping may
# wreak havoc with regular expressions or string interpretation, so be careful,
# and be sure to TEST!

# left-/right-most tags with head annotations
(left|right)mostHeadedTag(%[-\w]+)(=[-\w]+)?	(headedTag$2$3 without a $1 sister /.*/)
(left|right)mostHeaded([^\s=%]+)(%[-\w]+)(=[-\w]+)?	(headed$2$3$4 without a $1 sister /^(?:$2)/)

# Tags with head annotations
# Assumes non-terminal tags (not including annotations) are in all caps
headedTag(%[-\w]+)(=[-\w]+)?	(/^.*?__(.*)\$/#1$1$2 immediately dominating anything)
headed([^\s=%]+)(%[-\w]+)(=[-\w]+)?	(/^(?:$1)(?![A-Z\$]).*?__(.*)\$/#1$2$3 immediately dominating anything)

# Tags without head annotations
headlessTag	/^(?:.(?!__))*\$/
headless(?!Tag)([^\s=]+)	/^(?:$1)(?![A-Z\$])(?:.(?!__))*\$/

# Matches on a terminal with prepended index and appended POS
# NOTE: the terminal pattern (i.e. [-\w|]+) is simple to avoid matching on unwanted
# characters by accident
terminal_([-\w|]+)(=[-\w]+)?	/^(?:[0-9]+)?__(?:$1)__.*\$/$2

# Handling prepositions inside a PP that have been tagged as NNP instead of
# IN or TO, due to being part of a proper noun
properNounPrep	In|ON|Inside|On|Into|Over|Including|Against|Beyond|With


################################
# END: head propagation macros #
################################


################################
# START: transformation macros #
################################

# Don't need anything here yet.

##############################
# END: transformation macros #
##############################

# Punctuation tags found at http://www.computing.dcu.ie/~acahill/tagset.html,
# with brackets represented as in http://www.cis.upenn.edu/~treebank/tokenization.html.
punctuation(=[-\w]+)?\b	/^(punctPattern)/$1
punctPattern	\#|\\\$|''|,|\\\.|:|``|-(L|R)(R|S|C)B-
# Need this in regex form, since Tregex treats a literal comma as a relation meaning
# "immediately follows".
comma	/^,$/

TOP(=[-\w]+)?	(anything$1 not immediately dominated by anything)
terminal(=[-\w]+)?	(anything$1 not immediately dominating anything)
anything	__
